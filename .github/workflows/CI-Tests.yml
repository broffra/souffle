name: CI-Tests
on:
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:

jobs:
  Setup-Test-Env:
    runs-on: ubuntu-latest

    outputs:
      test-labels: ${{ steps['set-test-labels'].outputs['test-labels'] }}

    steps:
    - id: set-test-labels
      name: set-test-labels
      run: echo "::set-output name=test-labels::$(ctest --print-labels)"

  Code-Style:
    runs-on: ubuntu-latest

    steps:
    - name: checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 2

    - name: clang-format
      run: sh/run_test_format.sh

  Ubuntu-CMake:
    timeout-minutes: 150

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        domain: [32bit, 64bit, 64bit-noomp]

    runs-on: ${{ matrix.os }}

    steps:
    - name: checkout
      uses: actions/checkout@v2

    - name: set-env
      run: echo "JOBS=$(nproc || sysctl -n hw.ncpu || echo 2)" >> $GITHUB_ENV

    - name: install-deps
      run: sudo sh/setup/install_ubuntu_deps.sh

    - name: setup-32bit-domain
      if: ${{ matrix.domain == '32bit' }}
      run: cmake -S . -B build

    - name: setup-64bit-domain
      if: ${{ matrix.domain == '64bit' }}
      run: cmake -S . -B build -DSOUFFLE_DOMAIN_64BIT=ON

    - name: setup-64bit-domain-noomp
      if: ${{ matrix.domain == '64bit-noomp' }}
      run: cmake -S . -B build -DSOUFFLE_DOMAIN_64BIT=ON -DSOUFFLE_USE_OPENMP=OFF

    - name: echo
      run: echo "Runner is using ${JOBS} jobs"

    - name: make
      run: cmake --build build -j${JOBS}

    - name: check-interpreter
      run: cd build && ctest -L "interpreted" --output-on-failure --progress -j${JOBS}
      
    - name: check-others
      run: cd build && ctest -LE "interpreted" --output-on-failure --progress -j${JOBS}

  OSX-CMake:
    timeout-minutes: 150

    runs-on: macos-latest

    steps:
    - name: checkout
      uses: actions/checkout@v2

    - name: set-env
      run: echo "JOBS=$(nproc || sysctl -n hw.ncpu || echo 2)" >> $GITHUB_ENV

    - name: install-deps
      run: sh/setup/install_macos_deps.sh

    - name: setup-32bit-domain
      run: cmake -S . -B build

    - name: echo
      run: echo "Runner is using ${JOBS} jobs"

    - name: make
      run: cmake --build build -j${JOBS}

    - name: check-interpreter
      run: cd build && ctest -L "interpreted" --output-on-failure --progress -j${JOBS}

    - name: check-others
      run: cd build && ctest -LE "interpreted" --output-on-failure --progress -j${JOBS}
          
  Memory-Check:
    timeout-minutes: 150

    runs-on: ubuntu-latest

    steps:
    - name: checkout
      uses: actions/checkout@v2

    - name: set-env
      run: echo "JOBS=$(nproc || sysctl -n hw.ncpu || echo 2)" >> $GITHUB_ENV

    - name: install-deps
      run: sudo sh/setup/install_ubuntu_deps.sh

    - name: echo
      run: echo "Runner is using ${JOBS} jobs"

    - name: setup-with-memory-sanitizer
      run: cmake -S . -B build -DSOUFFLE_SANITISE_MEMORY=ON -DSOUFFLE_TEST_EVALUATION=OFF

    - name: make
      run: cmake --build build -j${JOBS}

    - name: check
      run: cd build && ctest --output-on-failure --progress -j${JOBS}

  Code-Coverage:
    timeout-minutes: 150

    runs-on: ubuntu-latest

    steps:
    - name: checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: set-env
      run: echo "JOBS=$(nproc || sysctl -n hw.ncpu || echo 2)" >> $GITHUB_ENV

    - name: install-lcov
      run: sudo apt-get update && sudo apt-get install lcov

    - name: install-deps
      run: sudo sh/setup/install_ubuntu_deps.sh

    - name: setup-with-code-coverage-on
      run: cmake -DSOUFFLE_CODE_COVERAGE=ON -S . -B ./build

    - name: echo
      run: echo "Runner is using ${JOBS} jobs"

    - name: make
      run: cmake --build build -j${JOBS}

    - name: check
      run: cd build && ctest --output-on-failure --progress -j${JOBS}

    - name: create-coverage-report
      run: lcov --capture --directory . --output-file coverage.info

    - name: remove-system-files-from-coverage-report
      run: lcov --remove coverage.info '/usr/*' --output-file coverage.info

    - name: upload-coverage-report
      uses: codecov/codecov-action@v2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: coverage.info
