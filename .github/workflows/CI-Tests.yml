name: CI-Tests
on:
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:

jobs:
  Code-Style:
    runs-on: ubuntu-latest

    steps:
    - name: checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 2

    - name: clang-format
      run: sh/run_test_format.sh

  TestSetup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-test-ids.outputs.matrix }}
    steps:
      - id: set-test-ids
        run: |
          CHUNKS=$(python -c 'import json; print(json.dumps(list(range(4))))')
          echo "::set-output name=chunks::${CHUNKS}"
          echo "Test chunks: ${CHUNKS}."

  Ubuntu-CMake:
    needs: TestSetup
    timeout-minutes: 150

    name: Ubuntu-CMake (${{ matrix.chunk }})

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        domain: [32bit, 64bit, 64bit-noomp]
        chunk: ${{fromJSON(needs.TestSetup.outputs.chunks)}}

    runs-on: ${{ matrix.os }}

    steps:
    - name: checkout
      uses: actions/checkout@v2

    - name: setup-env
      run: |
        JOBS=$(nproc || sysctl -n hw.ncpu || echo 2)
        echo "JOBS=${JOBS}" >> $GITHUB_ENV
        echo "Test runner will use ${JOBS} jobs."

    - name: install-deps
      run: sudo sh/setup/install_ubuntu_deps.sh

    - name: setup-32bit-domain
      if: ${{ matrix.domain == '32bit' }}
      run: cmake -S . -B build

    - name: setup-64bit-domain
      if: ${{ matrix.domain == '64bit' }}
      run: cmake -S . -B build -DSOUFFLE_DOMAIN_64BIT=ON

    - name: setup-64bit-domain-noomp
      if: ${{ matrix.domain == '64bit-noomp' }}
      run: cmake -S . -B build -DSOUFFLE_DOMAIN_64BIT=ON -DSOUFFLE_USE_OPENMP=OFF

    - name: make
      run: cmake --build build -j${JOBS}

    - name: ctest
      run: |
        CHUNKS=$(echo "$(ctest --test-dir build --show-only=json-v1 | jq '.tests | length') ${{ matrix.chunk }}" | python -c 'import json, sys; n_tests, n_chunks = map(int, sys.stdin.readline().split()); d, m = divmod(n_tests, n_chunks); print(json.dumps([f"{i * d + min(m, i) + 1},{(i+1) * d + min(m, i+1)}" for i in range(n_chunks)]))')
        ctest --test-dir build -I "${{ matrix.chunk }}" --output-on-failure --progress -j${JOBS}

  OSX-CMake:
    timeout-minutes: 150

    runs-on: macos-latest

    steps:
    - name: checkout
      uses: actions/checkout@v2

    - name: setup-env
      run: |
        JOBS=$(nproc || sysctl -n hw.ncpu || echo 2)
        echo "JOBS=${JOBS}" >> $GITHUB_ENV
        echo "Test runner will use ${JOBS} jobs."

    - name: install-deps
      run: sh/setup/install_macos_deps.sh

    - name: setup-32bit-domain
      run: cmake -S . -B build

    - name: make
      run: cmake --build build -j${JOBS}

    - name: check-interpreter
      run: cd build && ctest -L "interpreted" --output-on-failure --progress -j${JOBS}

    - name: check-others
      run: cd build && ctest -LE "interpreted" --output-on-failure --progress -j${JOBS}
          
  Memory-Check:
    timeout-minutes: 150

    runs-on: ubuntu-latest

    steps:
    - name: checkout
      uses: actions/checkout@v2

    - name: setup-env
      run: |
        JOBS=$(nproc || sysctl -n hw.ncpu || echo 2)
        echo "JOBS=${JOBS}" >> $GITHUB_ENV
        echo "Test runner will use ${JOBS} jobs."

    - name: install-deps
      run: sudo sh/setup/install_ubuntu_deps.sh

    - name: setup-with-memory-sanitizer
      run: cmake -S . -B build -DSOUFFLE_SANITISE_MEMORY=ON -DSOUFFLE_TEST_EVALUATION=OFF

    - name: make
      run: cmake --build build -j${JOBS}

    - name: check
      run: cd build && ctest --output-on-failure --progress -j${JOBS}

  Code-Coverage:
    timeout-minutes: 150

    runs-on: ubuntu-latest

    steps:
    - name: checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: setup-env
      run: |
        JOBS=$(nproc || sysctl -n hw.ncpu || echo 2)
        echo "JOBS=${JOBS}" >> $GITHUB_ENV
        echo "Test runner will use ${JOBS} jobs."

    - name: install-lcov
      run: sudo apt-get update && sudo apt-get install lcov

    - name: install-deps
      run: sudo sh/setup/install_ubuntu_deps.sh

    - name: setup-with-code-coverage-on
      run: cmake -DSOUFFLE_CODE_COVERAGE=ON -S . -B ./build

    - name: make
      run: cmake --build build -j${JOBS}

    - name: check
      run: cd build && ctest --output-on-failure --progress -j${JOBS}

    - name: create-coverage-report
      run: lcov --capture --directory . --output-file coverage.info

    - name: remove-system-files-from-coverage-report
      run: lcov --remove coverage.info '/usr/*' --output-file coverage.info

    - name: upload-coverage-report
      uses: codecov/codecov-action@v2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: coverage.info
